# Builds and uploads a docker image and scans it with trivy (optional)
# Trivy scan can be disabled
# Image tag options: 
# tag_generation: "ticket_from_branch" The ticket is extracted from the brnach name (eg. OPS-123-testing -> OPS-123)
# tag_generation: "commit_hash" Short hash of the commit is used as tag
# tag_generation: "version_git_tag" Git tag with version is used as tag
# add_latest_tag: true/false "latest" gets added as additiontal image tag
 
name: Build and upload image (and run Trivy)
on:
  workflow_call:
    inputs:
      image_name:
        description: "Name of the image to build"
        required: true
        type: string
      context:
        description: "Directory where the image is built, defaults to repository root"
        required: false
        default: "./"
        type: string
      container_registry:
        description: "Target container registry. Currently only ghcr.io(default) is implemented."
        required: false
        type: string
        default: "ghcr.io"
      add_latest_tag:
        description: "Wether latest should be added as image tag (default: false)"
        required: false
        type: boolean
        default: false
      tag_generation:
        description: "Generation of the image tag: ticket_from_branch(default), commit_hash or version_git_tag"
        required: false
        type: string
        default: "ticket_from_branch"
      run_trivy_scan:
        description: "Wether a trivy scan should run on the uploaded image (default: true)"
        required: false
        type: boolean
        default: true


jobs:
  build_and_upload_image:
    name: Build and upload image to ${{ inputs.container_registry }}
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.docker_build_push.outputs.digest }}
    permissions:
      packages: write
      actions: read
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1

      - name: Build image name and tags
        id: docker_meta_img
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 #v5.0.0
        with:
          images: ${{ inputs.container_registry }}/${{ github.repository_owner }}/${{ inputs.image_name }}
          tags: |
            type=match,value={{branch}},pattern=^\w+?-\d+,enable=${{ inputs.tag_generation == 'ticket_from_branch' }}
            type=match,value=${{ github.head_ref || ''}},pattern=^\w+?-\d+,enable=${{ inputs.tag_generation == 'ticket_from_branch' }}
            type=sha,enable=${{ inputs.tag_generation == 'commit_hash' }}
            type=pep440,pattern={{version}},enable=${{ inputs.tag_generation == 'version_git_tag' }}
          flavor: |
            latest=${{ inputs.add_latest_tag }}

      - name: Login (GHCR)
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d #v3.0.0
        if: ${{ inputs.container_registry == 'ghcr.io' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ github.repository }} to ${{ inputs.container_registry }}
        id: docker_build_push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 #v5.0.0
        with:
          context: ${{ inputs.context }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta_img.outputs.tags }}
          labels: ${{ steps.docker_meta_img.outputs.labels }}

  trivy_scan:
    name: Run Trivy scan for uploaded image
    # Wait for image upload
    needs: build_and_upload_image
    if: ${{ inputs.run_trivy_scan }}
    runs-on: ubuntu-latest
    permissions:
      packages: read
      security-events: write
      actions: read
      contents: read
    steps:
      # GHCR requires the image to be all lowercase, otherwise trivy can't pull the image
      - name: Create lowercase image ref
        id: image_ref_lower
        env:
          image_ref: '${{ inputs.container_registry }}/${{ github.repository_owner }}/${{ inputs.image_name }}@${{ needs.build_and_upload_image.outputs.digest }}'
        run: echo "output=${image_ref,,}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe #v0.12.0
        with:
          image-ref: ${{ steps.image_ref_lower.outputs.output }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: 1
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@0116bc2df50751f9724a2e35ef1f24d22f90e4e1 #v2.22.3
        with:
          sarif_file: 'trivy-results.sarif'